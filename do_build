# Controlla se la variabile d'ambiente CPU_ENV_ACTIVATE è impostata
if [ -z "$CPU_ENV_ACTIVATE" ]; then
    echo "Activating CPU environment..."
    source "$PWD/activate"
fi


# Resetta l'OPTIND per evitare conflitti con altri script
OPTIND=1

# Resetta le variabili
TESTING=0
TEST_FILE=""
FILE=""
SIMULATION_PREV=${SIMULATION:-0}
SIMULATION=0

## If -c option is provided, clean the build
## If -t option is provided, build the test and export them to the test Project (~/workspace/Test_GPIO/src/programs)
## If -f option is provided, the 'file' is exported to the loader progam in the workspace as 'testLibProgram'

while getopts "ctsf:" opt; do
    case $opt in
        c)
            make clean
            ;;
        t)
            TESTING=1
            ;;
        s) 
            SIMULATION=1
            ;;
        f) 
            FILE=$OPTARG
            ;;
        \?)
            echo "Opzione non riconosciuta: -$OPTARG"
            ;;
    esac
done

# Exporting BTPU test programs files to CPU Testbench folder
if [ "$SIMULATION" -eq 1 ]; then  
    if [ "$SIMULATION_PREV" -eq 0 ]; then
        echo "Cleaning previous build..."
        make cleanall
    fi
    make sim
    executePython build/bin/test/test_BTPU build/bin/testBTPU.h testBTPU
    executePython build/bin/test/test_MatMul build/bin/testMatMul.h testMatMul

    executePython --format sv build/bin/test/test_BTPU build/bin/testBTPU.svh testBTPU
    executePython --format sv build/bin/test/test_BTPU "/home/alan.masutti/Documents/CPU Repo/testbench/BNN/testBTPUProgram.svh" testBTPU

    # executePython --format sv build/bin/test/test_MatMul build/bin/testMatMul.svh testMatMul
    # executePython --format sv build/bin/test/test_MatMul "/home/alan.masutti/Documents/CPU Repo/testbench/BNN/test_MatMulProgram.svh" testMatMul

    executePython --format sv build/bin/test/test_SerialCode build/bin/test_SerialCodeProgram.svh test_SerialCode
    executePython --format sv build/bin/test/test_SerialCode "/home/alan.masutti/Documents/CPU Repo/testbench/BNN/test_SerialCodeProgram.svh" test_SerialCode
    riscv32-unknown-elf-objdump -D build/bin/test/test_SerialCode > scratch/output/test_SerialCode_disas.txt
else
    if [ "$SIMULATION_PREV" -eq 1 ]; then
        echo "Cleaning previous simulation build..."
        make cleanall
    fi
    make
fi
make dump > scratch/output/dump.txt
make symbols > scratch/output/symbols.txt
make sections > scratch/output/sections.txt

if [ "$TESTING" -eq 1 ]; then
    make test
fi

mkdir -p scratch/output

# Dumping symbols using nm and objdump
riscv32-unknown-elf-nm -n -S build/bin/main.elf > scratch/output/nm.txt
echo "" >> scratch/output/nm.txt
echo "Dumping symbols section (with objdump)..." >> scratch/output/nm.txt
riscv32-unknown-elf-objdump -t build/bin/main.elf | sort >> scratch/output/nm.txt
riscv32-unknown-elf-objdump -D build/bin/main.elf > scratch/output/disas.txt

# Dumping sections and symbols of main.o using nm and objdump
riscv32-unknown-elf-nm -n -S build/obj/src/main.o > scratch/output/nm_main.txt
echo "" >> scratch/output/nm_main.txt
echo "Dumping sections..." >> scratch/output/nm_main.txt
riscv32-unknown-elf-readelf -S build/obj/src/main.o >> scratch/output/nm_main.txt
echo "" >> scratch/output/nm_main.txt
echo "Dumping symbols section (with objdump)..." >> scratch/output/nm_main.txt
riscv32-unknown-elf-objdump -t build/obj/src/main.o | sort >> scratch/output/nm_main.txt

# Exporting programs files local to project
executePython build/bin/main.elf build/bin/testLib.h testLib
executePython --format sv build/bin/main.elf build/bin/testLib.svh testLib

# Se -f non è stato specificato, esporta main.elf come testLibProgram.h altrimenti esporta il file specificato
if [ -z "$FILE" ]; then
    executePython build/bin/main.elf ~/workspace/TestCPU/src/programs/testLibProgram.h LibProgram
else
    # Controlla se il file esiste
    if [ ! -f "$FILE" ]; then
        echo "Eseguibile $FILE non trovato."
    else
        executePython $FILE ~/workspace/TestCPU/src/programs/testLibProgram.h LibProgram
    fi
fi

# Se i test sono abilitati, esporta i test
if [ $TESTING -eq 1 ]; then
    executePython build/bin/test/test_BTPU ~/workspace/Test_GPIO/src/programs/test_BTPU.h test_BTPU
    executePython build/bin/test/test_MatMul ~/workspace/Test_GPIO/src/programs/test_MatMul.h test_MatMul
    riscv32-unknown-elf-objdump -D build/bin/test/test_BTPU > scratch/output/testBTPU_disas.txt
    riscv32-unknown-elf-objdump -D build/bin/test/test_MatMul > scratch/output/testMatMul_disas.txt
fi